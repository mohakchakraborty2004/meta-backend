// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
Admin
User
}

model User {
 
  id       String @id @unique @default(cuid())
  username String @unique
  email    String @unique
  password String  
  avatarID String? 
  //relations
  avatar Avatars? @relation(fields: [avatarID], references: [id])
  role     Role
  spaces   Space[]
}

model Avatars {
  id       String @id @unique @default(cuid())
  name     String 
  imageUrl String
  userID   String
  //relations
  user     User[] //one avatar can have multiple users
}

model Space {
    id        String          @id @unique @default(cuid())
    name      String 
    width     Int
    height    Int
    thumbnail String
    creatorID String
    //relations
    creator   User            @relation(fields: [creatorID], references: [id])// which user created 
    elements  spaceElements[] //space has a set of elements
}

model spaceElements {
   id           String    @id @unique @default(cuid())
   elementID    String
   spaceID      String
   x            Int     //x position of the element
   y            Int     //y position of the element
   //relations
   element      Elements  @relation(fields: [elementID], references: [id])// which element(s)
   space        Space     @relation(fields: [spaceID], references: [id])// every space element belongs to one or multiple spaces
}

model Elements {
   id       String          @id @unique @default(cuid())
   height   Int
   width    Int
   ImageUrl String
   //relations
   maps     MapElements[] //every element belongs to multiple maps
   spaces   spaceElements[] //every element belongs to multiple spaces
}

model Map {
   id          String      @id @unique @default(cuid())
   width       Int
   height      Int
   name        String
   //relations
   MapElements MapElements[] // every map has multiple elements
}

model MapElements {
   id        String   @id @unique @default(cuid())
   elementID String
   mapID     String
   x         Int
   y         Int
   //relations
   element   Elements @relation(fields: [elementID], references: [id])// which element(s)
   map       Map      @relation(fields: [mapID], references: [id]) // which map element(s) belong to which map
}
